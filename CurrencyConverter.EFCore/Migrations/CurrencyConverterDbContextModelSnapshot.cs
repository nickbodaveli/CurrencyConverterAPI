// <auto-generated />
using System;
using CurrencyConverter.EFCore.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CurrencyConverter.EFCore.Migrations
{
    [DbContext(typeof(CurrencyConverterDbContext))]
    partial class CurrencyConverterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CurrencyConverter.Domain.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameLatin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("CurrencyConverter.Domain.CurrencySetter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("SetCurrencyCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("SetCurrencyPrice")
                        .HasMaxLength(100)
                        .HasColumnType("double");

                    b.Property<double>("SetSellPrice")
                        .HasMaxLength(100)
                        .HasColumnType("double");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("CurrencySetters", (string)null);
                });

            modelBuilder.Entity("CurrencyConverter.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PrivateNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CurrencyConverter.Domain.UserHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("ConvertedPrice")
                        .HasMaxLength(100)
                        .HasColumnType("double");

                    b.Property<DateTime>("ConvertedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PrivateNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecomendatorPrivateNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserHistories", (string)null);
                });

            modelBuilder.Entity("CurrencyConverter.Domain.UserHistoryReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ConvertedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("ConvertedPriceSum")
                        .HasMaxLength(100)
                        .HasColumnType("double");

                    b.Property<double>("ConvertedPriceSumOfGel")
                        .HasMaxLength(100)
                        .HasColumnType("double");

                    b.Property<int>("UserHistoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserHistoryId")
                        .IsUnique();

                    b.ToTable("UserHistoryReports", (string)null);
                });

            modelBuilder.Entity("CurrencyConverter.Domain.UserHistory", b =>
                {
                    b.HasOne("CurrencyConverter.Domain.User", null)
                        .WithMany("UserHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurrencyConverter.Domain.UserHistoryReport", b =>
                {
                    b.HasOne("CurrencyConverter.Domain.UserHistory", null)
                        .WithOne("UserHistoryReport")
                        .HasForeignKey("CurrencyConverter.Domain.UserHistoryReport", "UserHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurrencyConverter.Domain.User", b =>
                {
                    b.Navigation("UserHistories");
                });

            modelBuilder.Entity("CurrencyConverter.Domain.UserHistory", b =>
                {
                    b.Navigation("UserHistoryReport")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
